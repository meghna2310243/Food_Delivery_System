/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.foodorderingsystem;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import java.sql.*;

/**
 *
 * @author sec19
 */
public class Cart_list extends javax.swing.JFrame {
    private String cusId;
    private String cartId;
    private Connection con;
    /**
     * Creates new form Cart_list
     */
    public Cart_list(String custId,String cartId) {
        this.cusId = custId;
        this.cartId = cartId;
        initComponents();
        initDB();
        loadCartItems();
        
        
    }
    private void initDB() {
        try {
            Class.forName("oracle.jdbc.driver.OracleDriver");
            con = DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe", "system", "orcl");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Database connection error: " + e.getMessage());
        }
    }
    private void loadCartItems() {
        try {
        DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
        model.setRowCount(0);
        PreparedStatement ps = con.prepareStatement(
            "SELECT f.food_id,f.food_name, c.quantity, c.price " +
            "FROM CART_ITEMS c JOIN FOOD_ITEM f ON c.food_id = f.food_id " +
            "WHERE c.cart_id = ?");
        ps.setString(1, cartId);
        ResultSet rs = ps.executeQuery();
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("food_id"),
                rs.getString("food_name"),
                rs.getInt("quantity"),
                rs.getDouble("price")
            });
        }
        rs.close(); ps.close();
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, "Error loading cart: " + ex.getMessage());
    }
    }

    private void removeItem(String cartId) {
       
        int sel = tableCart.getSelectedRow();
    if (sel < 0) {
        JOptionPane.showMessageDialog(this,
            "Please select an item to remove.",
            "No Selection",
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    // 2. Grab the food_id from column 0 of that row
    DefaultTableModel model = (DefaultTableModel) tableCart.getModel();
    String foodId = (String) model.getValueAt(sel, 0);

    // 3. Delete from CART_ITEMS in the database
    try (PreparedStatement ps = con.prepareStatement(
             "DELETE FROM CART_ITEMS WHERE cart_id = ? AND food_id = ?")) {
        ps.setString(1, cartId);
        ps.setString(2, foodId);
        int rows = ps.executeUpdate();
        if (rows == 0) {
            JOptionPane.showMessageDialog(this,
                "No matching cart item found in DB.",
                "Delete Failed",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this,
            "Error removing item: " + ex.getMessage(),
            "DB Error",
            JOptionPane.ERROR_MESSAGE);
        return;
    }

    // 4. Remove it from the table model so the UI updates
    model.removeRow(sel);
    JOptionPane.showMessageDialog(this,
        "Item removed from cart.",
        "Removed",
        JOptionPane.INFORMATION_MESSAGE);
    }

    private void goBack() {
        new Menu(cusId).setVisible(true);
        this.dispose();
    }
    private String generateNewOrderId() {
    String newOrderId = "O001"; // default starting ID
    try {
        Statement stmt = con.createStatement();
        ResultSet rs = stmt.executeQuery("SELECT MAX(order_id) FROM ORDERS");

        if (rs.next()) {
            String lastId = rs.getString(1);
            if (lastId != null) {
                int num = Integer.parseInt(lastId.substring(1)); // remove 'O' and parse number
                num++;
                newOrderId = String.format("O%03d", num);
            }
        }

        rs.close();
        stmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error generating Order ID: " + e.getMessage());
    }

    return newOrderId;
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCart = new javax.swing.JTable();
        btnRemove = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tableCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Food ID", "Food Name", "Quantity", "Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tableCart);

        btnRemove.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnConfirm.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        btnConfirm.setText("Confirm Order");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel1.setText("CART ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(241, 241, 241))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnConfirm))
                        .addContainerGap(24, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnRemove)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnConfirm)
                        .addGap(47, 47, 47))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        goBack();
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(this,"Remove works");
        removeItem(cartId);
        
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        // TODO add your handling code here:
        try {
        // 1. Generate a new unique order_id
        String newOrderId = generateNewOrderId();

        // 2. Calculate total price from CART_ITEMS
        PreparedStatement psTotal = con.prepareStatement(
            "SELECT SUM(price) AS total FROM CART_ITEMS WHERE cart_id = ?");
        psTotal.setString(1, cartId);
        ResultSet rsTotal = psTotal.executeQuery();

        double totalPrice = 0.0;
        if (rsTotal.next()) {
            totalPrice = rsTotal.getDouble("total");
        }
        rsTotal.close();
        psTotal.close();

        // 3. Insert into ORDERS table
        PreparedStatement psInsert = con.prepareStatement(
            "INSERT INTO ORDERS (order_id, cart_id, total_price) VALUES (?, ?, ?)");
        psInsert.setString(1, newOrderId);
        psInsert.setString(2, cartId);
        psInsert.setDouble(3, totalPrice);

        int rows = psInsert.executeUpdate();
        psInsert.close();

        if (rows > 0) {
            JOptionPane.showMessageDialog(this, "Order Confirmed!\nOrder ID: " + newOrderId + 
                    "\nTotal Price: ₹" + totalPrice, "Order Success", JOptionPane.INFORMATION_MESSAGE);
            // Optionally disable the Confirm button to prevent double orders
            btnConfirm.setEnabled(false);
            new Receipt(cusId,newOrderId).setVisible(true);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to confirm order.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnConfirmActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Cart_list.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Cart_list.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Cart_list.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Cart_list.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Cart_list("?","?").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JButton btnRemove;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableCart;
    // End of variables declaration//GEN-END:variables
}
